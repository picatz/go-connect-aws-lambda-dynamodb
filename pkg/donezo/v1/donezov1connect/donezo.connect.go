// Code generated by protoc-gen-connect-go. DO NOT EDIT.
//
// Source: proto/donezo/v1/donezo.proto

package donezov1connect

import (
	connect "connectrpc.com/connect"
	context "context"
	errors "errors"
	v1 "github.com/picatz/go-connect-aws-lambda-dynamodb/pkg/donezo/v1"
	http "net/http"
	strings "strings"
)

// This is a compile-time assertion to ensure that this generated file and the connect package are
// compatible. If you get a compiler error that this constant is not defined, this code was
// generated with a version of connect newer than the one compiled into your binary. You can fix the
// problem by either regenerating this code with an older version of connect or updating the connect
// version compiled into your binary.
const _ = connect.IsAtLeastVersion1_13_0

const (
	// TasksServiceName is the fully-qualified name of the TasksService service.
	TasksServiceName = "donezo.v1.TasksService"
	// OrganizationsServiceName is the fully-qualified name of the OrganizationsService service.
	OrganizationsServiceName = "donezo.v1.OrganizationsService"
	// ProjectsServiceName is the fully-qualified name of the ProjectsService service.
	ProjectsServiceName = "donezo.v1.ProjectsService"
	// UsersServiceName is the fully-qualified name of the UsersService service.
	UsersServiceName = "donezo.v1.UsersService"
)

// These constants are the fully-qualified names of the RPCs defined in this package. They're
// exposed at runtime as Spec.Procedure and as the final two segments of the HTTP route.
//
// Note that these are different from the fully-qualified method names used by
// google.golang.org/protobuf/reflect/protoreflect. To convert from these constants to
// reflection-formatted method names, remove the leading slash and convert the remaining slash to a
// period.
const (
	// TasksServiceGetTaskProcedure is the fully-qualified name of the TasksService's GetTask RPC.
	TasksServiceGetTaskProcedure = "/donezo.v1.TasksService/GetTask"
	// TasksServiceCreateTaskProcedure is the fully-qualified name of the TasksService's CreateTask RPC.
	TasksServiceCreateTaskProcedure = "/donezo.v1.TasksService/CreateTask"
	// TasksServiceUpdateTaskProcedure is the fully-qualified name of the TasksService's UpdateTask RPC.
	TasksServiceUpdateTaskProcedure = "/donezo.v1.TasksService/UpdateTask"
	// TasksServiceDeleteTaskProcedure is the fully-qualified name of the TasksService's DeleteTask RPC.
	TasksServiceDeleteTaskProcedure = "/donezo.v1.TasksService/DeleteTask"
	// TasksServiceListTasksProcedure is the fully-qualified name of the TasksService's ListTasks RPC.
	TasksServiceListTasksProcedure = "/donezo.v1.TasksService/ListTasks"
	// OrganizationsServiceGetOrganizationProcedure is the fully-qualified name of the
	// OrganizationsService's GetOrganization RPC.
	OrganizationsServiceGetOrganizationProcedure = "/donezo.v1.OrganizationsService/GetOrganization"
	// OrganizationsServiceCreateOrganizationProcedure is the fully-qualified name of the
	// OrganizationsService's CreateOrganization RPC.
	OrganizationsServiceCreateOrganizationProcedure = "/donezo.v1.OrganizationsService/CreateOrganization"
	// OrganizationsServiceUpdateOrganizationProcedure is the fully-qualified name of the
	// OrganizationsService's UpdateOrganization RPC.
	OrganizationsServiceUpdateOrganizationProcedure = "/donezo.v1.OrganizationsService/UpdateOrganization"
	// OrganizationsServiceListOrganizationsProcedure is the fully-qualified name of the
	// OrganizationsService's ListOrganizations RPC.
	OrganizationsServiceListOrganizationsProcedure = "/donezo.v1.OrganizationsService/ListOrganizations"
	// OrganizationsServiceDeleteOrganizationProcedure is the fully-qualified name of the
	// OrganizationsService's DeleteOrganization RPC.
	OrganizationsServiceDeleteOrganizationProcedure = "/donezo.v1.OrganizationsService/DeleteOrganization"
	// OrganizationsServiceGetOrganizationMemberProcedure is the fully-qualified name of the
	// OrganizationsService's GetOrganizationMember RPC.
	OrganizationsServiceGetOrganizationMemberProcedure = "/donezo.v1.OrganizationsService/GetOrganizationMember"
	// OrganizationsServiceCreateOrganizationMemberProcedure is the fully-qualified name of the
	// OrganizationsService's CreateOrganizationMember RPC.
	OrganizationsServiceCreateOrganizationMemberProcedure = "/donezo.v1.OrganizationsService/CreateOrganizationMember"
	// OrganizationsServiceUpdateOrganizationMemberProcedure is the fully-qualified name of the
	// OrganizationsService's UpdateOrganizationMember RPC.
	OrganizationsServiceUpdateOrganizationMemberProcedure = "/donezo.v1.OrganizationsService/UpdateOrganizationMember"
	// OrganizationsServiceListOrganizationMembersProcedure is the fully-qualified name of the
	// OrganizationsService's ListOrganizationMembers RPC.
	OrganizationsServiceListOrganizationMembersProcedure = "/donezo.v1.OrganizationsService/ListOrganizationMembers"
	// OrganizationsServiceDeleteOrganizationMemberProcedure is the fully-qualified name of the
	// OrganizationsService's DeleteOrganizationMember RPC.
	OrganizationsServiceDeleteOrganizationMemberProcedure = "/donezo.v1.OrganizationsService/DeleteOrganizationMember"
	// ProjectsServiceGetProjectProcedure is the fully-qualified name of the ProjectsService's
	// GetProject RPC.
	ProjectsServiceGetProjectProcedure = "/donezo.v1.ProjectsService/GetProject"
	// ProjectsServiceCreateProjectProcedure is the fully-qualified name of the ProjectsService's
	// CreateProject RPC.
	ProjectsServiceCreateProjectProcedure = "/donezo.v1.ProjectsService/CreateProject"
	// ProjectsServiceUpdateProjectProcedure is the fully-qualified name of the ProjectsService's
	// UpdateProject RPC.
	ProjectsServiceUpdateProjectProcedure = "/donezo.v1.ProjectsService/UpdateProject"
	// ProjectsServiceListProjectsProcedure is the fully-qualified name of the ProjectsService's
	// ListProjects RPC.
	ProjectsServiceListProjectsProcedure = "/donezo.v1.ProjectsService/ListProjects"
	// ProjectsServiceDeleteProjectProcedure is the fully-qualified name of the ProjectsService's
	// DeleteProject RPC.
	ProjectsServiceDeleteProjectProcedure = "/donezo.v1.ProjectsService/DeleteProject"
	// UsersServiceGetUserProcedure is the fully-qualified name of the UsersService's GetUser RPC.
	UsersServiceGetUserProcedure = "/donezo.v1.UsersService/GetUser"
	// UsersServiceCreateUserProcedure is the fully-qualified name of the UsersService's CreateUser RPC.
	UsersServiceCreateUserProcedure = "/donezo.v1.UsersService/CreateUser"
	// UsersServiceUpdateUserProcedure is the fully-qualified name of the UsersService's UpdateUser RPC.
	UsersServiceUpdateUserProcedure = "/donezo.v1.UsersService/UpdateUser"
	// UsersServiceListUsersProcedure is the fully-qualified name of the UsersService's ListUsers RPC.
	UsersServiceListUsersProcedure = "/donezo.v1.UsersService/ListUsers"
	// UsersServiceDeleteUserProcedure is the fully-qualified name of the UsersService's DeleteUser RPC.
	UsersServiceDeleteUserProcedure = "/donezo.v1.UsersService/DeleteUser"
)

// These variables are the protoreflect.Descriptor objects for the RPCs defined in this package.
var (
	tasksServiceServiceDescriptor                                = v1.File_proto_donezo_v1_donezo_proto.Services().ByName("TasksService")
	tasksServiceGetTaskMethodDescriptor                          = tasksServiceServiceDescriptor.Methods().ByName("GetTask")
	tasksServiceCreateTaskMethodDescriptor                       = tasksServiceServiceDescriptor.Methods().ByName("CreateTask")
	tasksServiceUpdateTaskMethodDescriptor                       = tasksServiceServiceDescriptor.Methods().ByName("UpdateTask")
	tasksServiceDeleteTaskMethodDescriptor                       = tasksServiceServiceDescriptor.Methods().ByName("DeleteTask")
	tasksServiceListTasksMethodDescriptor                        = tasksServiceServiceDescriptor.Methods().ByName("ListTasks")
	organizationsServiceServiceDescriptor                        = v1.File_proto_donezo_v1_donezo_proto.Services().ByName("OrganizationsService")
	organizationsServiceGetOrganizationMethodDescriptor          = organizationsServiceServiceDescriptor.Methods().ByName("GetOrganization")
	organizationsServiceCreateOrganizationMethodDescriptor       = organizationsServiceServiceDescriptor.Methods().ByName("CreateOrganization")
	organizationsServiceUpdateOrganizationMethodDescriptor       = organizationsServiceServiceDescriptor.Methods().ByName("UpdateOrganization")
	organizationsServiceListOrganizationsMethodDescriptor        = organizationsServiceServiceDescriptor.Methods().ByName("ListOrganizations")
	organizationsServiceDeleteOrganizationMethodDescriptor       = organizationsServiceServiceDescriptor.Methods().ByName("DeleteOrganization")
	organizationsServiceGetOrganizationMemberMethodDescriptor    = organizationsServiceServiceDescriptor.Methods().ByName("GetOrganizationMember")
	organizationsServiceCreateOrganizationMemberMethodDescriptor = organizationsServiceServiceDescriptor.Methods().ByName("CreateOrganizationMember")
	organizationsServiceUpdateOrganizationMemberMethodDescriptor = organizationsServiceServiceDescriptor.Methods().ByName("UpdateOrganizationMember")
	organizationsServiceListOrganizationMembersMethodDescriptor  = organizationsServiceServiceDescriptor.Methods().ByName("ListOrganizationMembers")
	organizationsServiceDeleteOrganizationMemberMethodDescriptor = organizationsServiceServiceDescriptor.Methods().ByName("DeleteOrganizationMember")
	projectsServiceServiceDescriptor                             = v1.File_proto_donezo_v1_donezo_proto.Services().ByName("ProjectsService")
	projectsServiceGetProjectMethodDescriptor                    = projectsServiceServiceDescriptor.Methods().ByName("GetProject")
	projectsServiceCreateProjectMethodDescriptor                 = projectsServiceServiceDescriptor.Methods().ByName("CreateProject")
	projectsServiceUpdateProjectMethodDescriptor                 = projectsServiceServiceDescriptor.Methods().ByName("UpdateProject")
	projectsServiceListProjectsMethodDescriptor                  = projectsServiceServiceDescriptor.Methods().ByName("ListProjects")
	projectsServiceDeleteProjectMethodDescriptor                 = projectsServiceServiceDescriptor.Methods().ByName("DeleteProject")
	usersServiceServiceDescriptor                                = v1.File_proto_donezo_v1_donezo_proto.Services().ByName("UsersService")
	usersServiceGetUserMethodDescriptor                          = usersServiceServiceDescriptor.Methods().ByName("GetUser")
	usersServiceCreateUserMethodDescriptor                       = usersServiceServiceDescriptor.Methods().ByName("CreateUser")
	usersServiceUpdateUserMethodDescriptor                       = usersServiceServiceDescriptor.Methods().ByName("UpdateUser")
	usersServiceListUsersMethodDescriptor                        = usersServiceServiceDescriptor.Methods().ByName("ListUsers")
	usersServiceDeleteUserMethodDescriptor                       = usersServiceServiceDescriptor.Methods().ByName("DeleteUser")
)

// TasksServiceClient is a client for the donezo.v1.TasksService service.
type TasksServiceClient interface {
	GetTask(context.Context, *connect.Request[v1.GetTaskRequest]) (*connect.Response[v1.GetTaskResponse], error)
	CreateTask(context.Context, *connect.Request[v1.CreateTaskRequest]) (*connect.Response[v1.CreateTaskResponse], error)
	UpdateTask(context.Context, *connect.Request[v1.UpdateTaskRequest]) (*connect.Response[v1.UpdateTaskResponse], error)
	DeleteTask(context.Context, *connect.Request[v1.DeleteTaskRequest]) (*connect.Response[v1.DeleteTaskResponse], error)
	ListTasks(context.Context, *connect.Request[v1.ListTasksRequest]) (*connect.Response[v1.ListTasksResponse], error)
}

// NewTasksServiceClient constructs a client for the donezo.v1.TasksService service. By default, it
// uses the Connect protocol with the binary Protobuf Codec, asks for gzipped responses, and sends
// uncompressed requests. To use the gRPC or gRPC-Web protocols, supply the connect.WithGRPC() or
// connect.WithGRPCWeb() options.
//
// The URL supplied here should be the base URL for the Connect or gRPC server (for example,
// http://api.acme.com or https://acme.com/grpc).
func NewTasksServiceClient(httpClient connect.HTTPClient, baseURL string, opts ...connect.ClientOption) TasksServiceClient {
	baseURL = strings.TrimRight(baseURL, "/")
	return &tasksServiceClient{
		getTask: connect.NewClient[v1.GetTaskRequest, v1.GetTaskResponse](
			httpClient,
			baseURL+TasksServiceGetTaskProcedure,
			connect.WithSchema(tasksServiceGetTaskMethodDescriptor),
			connect.WithIdempotency(connect.IdempotencyNoSideEffects),
			connect.WithClientOptions(opts...),
		),
		createTask: connect.NewClient[v1.CreateTaskRequest, v1.CreateTaskResponse](
			httpClient,
			baseURL+TasksServiceCreateTaskProcedure,
			connect.WithSchema(tasksServiceCreateTaskMethodDescriptor),
			connect.WithIdempotency(connect.IdempotencyIdempotent),
			connect.WithClientOptions(opts...),
		),
		updateTask: connect.NewClient[v1.UpdateTaskRequest, v1.UpdateTaskResponse](
			httpClient,
			baseURL+TasksServiceUpdateTaskProcedure,
			connect.WithSchema(tasksServiceUpdateTaskMethodDescriptor),
			connect.WithIdempotency(connect.IdempotencyIdempotent),
			connect.WithClientOptions(opts...),
		),
		deleteTask: connect.NewClient[v1.DeleteTaskRequest, v1.DeleteTaskResponse](
			httpClient,
			baseURL+TasksServiceDeleteTaskProcedure,
			connect.WithSchema(tasksServiceDeleteTaskMethodDescriptor),
			connect.WithIdempotency(connect.IdempotencyIdempotent),
			connect.WithClientOptions(opts...),
		),
		listTasks: connect.NewClient[v1.ListTasksRequest, v1.ListTasksResponse](
			httpClient,
			baseURL+TasksServiceListTasksProcedure,
			connect.WithSchema(tasksServiceListTasksMethodDescriptor),
			connect.WithIdempotency(connect.IdempotencyNoSideEffects),
			connect.WithClientOptions(opts...),
		),
	}
}

// tasksServiceClient implements TasksServiceClient.
type tasksServiceClient struct {
	getTask    *connect.Client[v1.GetTaskRequest, v1.GetTaskResponse]
	createTask *connect.Client[v1.CreateTaskRequest, v1.CreateTaskResponse]
	updateTask *connect.Client[v1.UpdateTaskRequest, v1.UpdateTaskResponse]
	deleteTask *connect.Client[v1.DeleteTaskRequest, v1.DeleteTaskResponse]
	listTasks  *connect.Client[v1.ListTasksRequest, v1.ListTasksResponse]
}

// GetTask calls donezo.v1.TasksService.GetTask.
func (c *tasksServiceClient) GetTask(ctx context.Context, req *connect.Request[v1.GetTaskRequest]) (*connect.Response[v1.GetTaskResponse], error) {
	return c.getTask.CallUnary(ctx, req)
}

// CreateTask calls donezo.v1.TasksService.CreateTask.
func (c *tasksServiceClient) CreateTask(ctx context.Context, req *connect.Request[v1.CreateTaskRequest]) (*connect.Response[v1.CreateTaskResponse], error) {
	return c.createTask.CallUnary(ctx, req)
}

// UpdateTask calls donezo.v1.TasksService.UpdateTask.
func (c *tasksServiceClient) UpdateTask(ctx context.Context, req *connect.Request[v1.UpdateTaskRequest]) (*connect.Response[v1.UpdateTaskResponse], error) {
	return c.updateTask.CallUnary(ctx, req)
}

// DeleteTask calls donezo.v1.TasksService.DeleteTask.
func (c *tasksServiceClient) DeleteTask(ctx context.Context, req *connect.Request[v1.DeleteTaskRequest]) (*connect.Response[v1.DeleteTaskResponse], error) {
	return c.deleteTask.CallUnary(ctx, req)
}

// ListTasks calls donezo.v1.TasksService.ListTasks.
func (c *tasksServiceClient) ListTasks(ctx context.Context, req *connect.Request[v1.ListTasksRequest]) (*connect.Response[v1.ListTasksResponse], error) {
	return c.listTasks.CallUnary(ctx, req)
}

// TasksServiceHandler is an implementation of the donezo.v1.TasksService service.
type TasksServiceHandler interface {
	GetTask(context.Context, *connect.Request[v1.GetTaskRequest]) (*connect.Response[v1.GetTaskResponse], error)
	CreateTask(context.Context, *connect.Request[v1.CreateTaskRequest]) (*connect.Response[v1.CreateTaskResponse], error)
	UpdateTask(context.Context, *connect.Request[v1.UpdateTaskRequest]) (*connect.Response[v1.UpdateTaskResponse], error)
	DeleteTask(context.Context, *connect.Request[v1.DeleteTaskRequest]) (*connect.Response[v1.DeleteTaskResponse], error)
	ListTasks(context.Context, *connect.Request[v1.ListTasksRequest]) (*connect.Response[v1.ListTasksResponse], error)
}

// NewTasksServiceHandler builds an HTTP handler from the service implementation. It returns the
// path on which to mount the handler and the handler itself.
//
// By default, handlers support the Connect, gRPC, and gRPC-Web protocols with the binary Protobuf
// and JSON codecs. They also support gzip compression.
func NewTasksServiceHandler(svc TasksServiceHandler, opts ...connect.HandlerOption) (string, http.Handler) {
	tasksServiceGetTaskHandler := connect.NewUnaryHandler(
		TasksServiceGetTaskProcedure,
		svc.GetTask,
		connect.WithSchema(tasksServiceGetTaskMethodDescriptor),
		connect.WithIdempotency(connect.IdempotencyNoSideEffects),
		connect.WithHandlerOptions(opts...),
	)
	tasksServiceCreateTaskHandler := connect.NewUnaryHandler(
		TasksServiceCreateTaskProcedure,
		svc.CreateTask,
		connect.WithSchema(tasksServiceCreateTaskMethodDescriptor),
		connect.WithIdempotency(connect.IdempotencyIdempotent),
		connect.WithHandlerOptions(opts...),
	)
	tasksServiceUpdateTaskHandler := connect.NewUnaryHandler(
		TasksServiceUpdateTaskProcedure,
		svc.UpdateTask,
		connect.WithSchema(tasksServiceUpdateTaskMethodDescriptor),
		connect.WithIdempotency(connect.IdempotencyIdempotent),
		connect.WithHandlerOptions(opts...),
	)
	tasksServiceDeleteTaskHandler := connect.NewUnaryHandler(
		TasksServiceDeleteTaskProcedure,
		svc.DeleteTask,
		connect.WithSchema(tasksServiceDeleteTaskMethodDescriptor),
		connect.WithIdempotency(connect.IdempotencyIdempotent),
		connect.WithHandlerOptions(opts...),
	)
	tasksServiceListTasksHandler := connect.NewUnaryHandler(
		TasksServiceListTasksProcedure,
		svc.ListTasks,
		connect.WithSchema(tasksServiceListTasksMethodDescriptor),
		connect.WithIdempotency(connect.IdempotencyNoSideEffects),
		connect.WithHandlerOptions(opts...),
	)
	return "/donezo.v1.TasksService/", http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		switch r.URL.Path {
		case TasksServiceGetTaskProcedure:
			tasksServiceGetTaskHandler.ServeHTTP(w, r)
		case TasksServiceCreateTaskProcedure:
			tasksServiceCreateTaskHandler.ServeHTTP(w, r)
		case TasksServiceUpdateTaskProcedure:
			tasksServiceUpdateTaskHandler.ServeHTTP(w, r)
		case TasksServiceDeleteTaskProcedure:
			tasksServiceDeleteTaskHandler.ServeHTTP(w, r)
		case TasksServiceListTasksProcedure:
			tasksServiceListTasksHandler.ServeHTTP(w, r)
		default:
			http.NotFound(w, r)
		}
	})
}

// UnimplementedTasksServiceHandler returns CodeUnimplemented from all methods.
type UnimplementedTasksServiceHandler struct{}

func (UnimplementedTasksServiceHandler) GetTask(context.Context, *connect.Request[v1.GetTaskRequest]) (*connect.Response[v1.GetTaskResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("donezo.v1.TasksService.GetTask is not implemented"))
}

func (UnimplementedTasksServiceHandler) CreateTask(context.Context, *connect.Request[v1.CreateTaskRequest]) (*connect.Response[v1.CreateTaskResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("donezo.v1.TasksService.CreateTask is not implemented"))
}

func (UnimplementedTasksServiceHandler) UpdateTask(context.Context, *connect.Request[v1.UpdateTaskRequest]) (*connect.Response[v1.UpdateTaskResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("donezo.v1.TasksService.UpdateTask is not implemented"))
}

func (UnimplementedTasksServiceHandler) DeleteTask(context.Context, *connect.Request[v1.DeleteTaskRequest]) (*connect.Response[v1.DeleteTaskResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("donezo.v1.TasksService.DeleteTask is not implemented"))
}

func (UnimplementedTasksServiceHandler) ListTasks(context.Context, *connect.Request[v1.ListTasksRequest]) (*connect.Response[v1.ListTasksResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("donezo.v1.TasksService.ListTasks is not implemented"))
}

// OrganizationsServiceClient is a client for the donezo.v1.OrganizationsService service.
type OrganizationsServiceClient interface {
	GetOrganization(context.Context, *connect.Request[v1.GetOrganizationRequest]) (*connect.Response[v1.GetOrganizationResponse], error)
	CreateOrganization(context.Context, *connect.Request[v1.CreateOrganizationRequest]) (*connect.Response[v1.CreateOrganizationResponse], error)
	UpdateOrganization(context.Context, *connect.Request[v1.UpdateOrganizationRequest]) (*connect.Response[v1.UpdateOrganizationResponse], error)
	ListOrganizations(context.Context, *connect.Request[v1.ListOrganizationsRequest]) (*connect.Response[v1.ListOrganizationsResponse], error)
	DeleteOrganization(context.Context, *connect.Request[v1.DeleteOrganizationRequest]) (*connect.Response[v1.DeleteOrganizationResponse], error)
	GetOrganizationMember(context.Context, *connect.Request[v1.GetOrganizationMemberRequest]) (*connect.Response[v1.GetOrganizationMemberResponse], error)
	CreateOrganizationMember(context.Context, *connect.Request[v1.CreateOrganizationMemberRequest]) (*connect.Response[v1.CreateOrganizationMemberResponse], error)
	UpdateOrganizationMember(context.Context, *connect.Request[v1.UpdateOrganizationMemberRequest]) (*connect.Response[v1.UpdateOrganizationMemberResponse], error)
	ListOrganizationMembers(context.Context, *connect.Request[v1.ListOrganizationMembersRequest]) (*connect.Response[v1.ListOrganizationMembersResponse], error)
	DeleteOrganizationMember(context.Context, *connect.Request[v1.DeleteOrganizationMemberRequest]) (*connect.Response[v1.DeleteOrganizationMemberResponse], error)
}

// NewOrganizationsServiceClient constructs a client for the donezo.v1.OrganizationsService service.
// By default, it uses the Connect protocol with the binary Protobuf Codec, asks for gzipped
// responses, and sends uncompressed requests. To use the gRPC or gRPC-Web protocols, supply the
// connect.WithGRPC() or connect.WithGRPCWeb() options.
//
// The URL supplied here should be the base URL for the Connect or gRPC server (for example,
// http://api.acme.com or https://acme.com/grpc).
func NewOrganizationsServiceClient(httpClient connect.HTTPClient, baseURL string, opts ...connect.ClientOption) OrganizationsServiceClient {
	baseURL = strings.TrimRight(baseURL, "/")
	return &organizationsServiceClient{
		getOrganization: connect.NewClient[v1.GetOrganizationRequest, v1.GetOrganizationResponse](
			httpClient,
			baseURL+OrganizationsServiceGetOrganizationProcedure,
			connect.WithSchema(organizationsServiceGetOrganizationMethodDescriptor),
			connect.WithIdempotency(connect.IdempotencyNoSideEffects),
			connect.WithClientOptions(opts...),
		),
		createOrganization: connect.NewClient[v1.CreateOrganizationRequest, v1.CreateOrganizationResponse](
			httpClient,
			baseURL+OrganizationsServiceCreateOrganizationProcedure,
			connect.WithSchema(organizationsServiceCreateOrganizationMethodDescriptor),
			connect.WithIdempotency(connect.IdempotencyIdempotent),
			connect.WithClientOptions(opts...),
		),
		updateOrganization: connect.NewClient[v1.UpdateOrganizationRequest, v1.UpdateOrganizationResponse](
			httpClient,
			baseURL+OrganizationsServiceUpdateOrganizationProcedure,
			connect.WithSchema(organizationsServiceUpdateOrganizationMethodDescriptor),
			connect.WithIdempotency(connect.IdempotencyIdempotent),
			connect.WithClientOptions(opts...),
		),
		listOrganizations: connect.NewClient[v1.ListOrganizationsRequest, v1.ListOrganizationsResponse](
			httpClient,
			baseURL+OrganizationsServiceListOrganizationsProcedure,
			connect.WithSchema(organizationsServiceListOrganizationsMethodDescriptor),
			connect.WithIdempotency(connect.IdempotencyNoSideEffects),
			connect.WithClientOptions(opts...),
		),
		deleteOrganization: connect.NewClient[v1.DeleteOrganizationRequest, v1.DeleteOrganizationResponse](
			httpClient,
			baseURL+OrganizationsServiceDeleteOrganizationProcedure,
			connect.WithSchema(organizationsServiceDeleteOrganizationMethodDescriptor),
			connect.WithIdempotency(connect.IdempotencyIdempotent),
			connect.WithClientOptions(opts...),
		),
		getOrganizationMember: connect.NewClient[v1.GetOrganizationMemberRequest, v1.GetOrganizationMemberResponse](
			httpClient,
			baseURL+OrganizationsServiceGetOrganizationMemberProcedure,
			connect.WithSchema(organizationsServiceGetOrganizationMemberMethodDescriptor),
			connect.WithIdempotency(connect.IdempotencyNoSideEffects),
			connect.WithClientOptions(opts...),
		),
		createOrganizationMember: connect.NewClient[v1.CreateOrganizationMemberRequest, v1.CreateOrganizationMemberResponse](
			httpClient,
			baseURL+OrganizationsServiceCreateOrganizationMemberProcedure,
			connect.WithSchema(organizationsServiceCreateOrganizationMemberMethodDescriptor),
			connect.WithIdempotency(connect.IdempotencyIdempotent),
			connect.WithClientOptions(opts...),
		),
		updateOrganizationMember: connect.NewClient[v1.UpdateOrganizationMemberRequest, v1.UpdateOrganizationMemberResponse](
			httpClient,
			baseURL+OrganizationsServiceUpdateOrganizationMemberProcedure,
			connect.WithSchema(organizationsServiceUpdateOrganizationMemberMethodDescriptor),
			connect.WithIdempotency(connect.IdempotencyIdempotent),
			connect.WithClientOptions(opts...),
		),
		listOrganizationMembers: connect.NewClient[v1.ListOrganizationMembersRequest, v1.ListOrganizationMembersResponse](
			httpClient,
			baseURL+OrganizationsServiceListOrganizationMembersProcedure,
			connect.WithSchema(organizationsServiceListOrganizationMembersMethodDescriptor),
			connect.WithIdempotency(connect.IdempotencyNoSideEffects),
			connect.WithClientOptions(opts...),
		),
		deleteOrganizationMember: connect.NewClient[v1.DeleteOrganizationMemberRequest, v1.DeleteOrganizationMemberResponse](
			httpClient,
			baseURL+OrganizationsServiceDeleteOrganizationMemberProcedure,
			connect.WithSchema(organizationsServiceDeleteOrganizationMemberMethodDescriptor),
			connect.WithIdempotency(connect.IdempotencyIdempotent),
			connect.WithClientOptions(opts...),
		),
	}
}

// organizationsServiceClient implements OrganizationsServiceClient.
type organizationsServiceClient struct {
	getOrganization          *connect.Client[v1.GetOrganizationRequest, v1.GetOrganizationResponse]
	createOrganization       *connect.Client[v1.CreateOrganizationRequest, v1.CreateOrganizationResponse]
	updateOrganization       *connect.Client[v1.UpdateOrganizationRequest, v1.UpdateOrganizationResponse]
	listOrganizations        *connect.Client[v1.ListOrganizationsRequest, v1.ListOrganizationsResponse]
	deleteOrganization       *connect.Client[v1.DeleteOrganizationRequest, v1.DeleteOrganizationResponse]
	getOrganizationMember    *connect.Client[v1.GetOrganizationMemberRequest, v1.GetOrganizationMemberResponse]
	createOrganizationMember *connect.Client[v1.CreateOrganizationMemberRequest, v1.CreateOrganizationMemberResponse]
	updateOrganizationMember *connect.Client[v1.UpdateOrganizationMemberRequest, v1.UpdateOrganizationMemberResponse]
	listOrganizationMembers  *connect.Client[v1.ListOrganizationMembersRequest, v1.ListOrganizationMembersResponse]
	deleteOrganizationMember *connect.Client[v1.DeleteOrganizationMemberRequest, v1.DeleteOrganizationMemberResponse]
}

// GetOrganization calls donezo.v1.OrganizationsService.GetOrganization.
func (c *organizationsServiceClient) GetOrganization(ctx context.Context, req *connect.Request[v1.GetOrganizationRequest]) (*connect.Response[v1.GetOrganizationResponse], error) {
	return c.getOrganization.CallUnary(ctx, req)
}

// CreateOrganization calls donezo.v1.OrganizationsService.CreateOrganization.
func (c *organizationsServiceClient) CreateOrganization(ctx context.Context, req *connect.Request[v1.CreateOrganizationRequest]) (*connect.Response[v1.CreateOrganizationResponse], error) {
	return c.createOrganization.CallUnary(ctx, req)
}

// UpdateOrganization calls donezo.v1.OrganizationsService.UpdateOrganization.
func (c *organizationsServiceClient) UpdateOrganization(ctx context.Context, req *connect.Request[v1.UpdateOrganizationRequest]) (*connect.Response[v1.UpdateOrganizationResponse], error) {
	return c.updateOrganization.CallUnary(ctx, req)
}

// ListOrganizations calls donezo.v1.OrganizationsService.ListOrganizations.
func (c *organizationsServiceClient) ListOrganizations(ctx context.Context, req *connect.Request[v1.ListOrganizationsRequest]) (*connect.Response[v1.ListOrganizationsResponse], error) {
	return c.listOrganizations.CallUnary(ctx, req)
}

// DeleteOrganization calls donezo.v1.OrganizationsService.DeleteOrganization.
func (c *organizationsServiceClient) DeleteOrganization(ctx context.Context, req *connect.Request[v1.DeleteOrganizationRequest]) (*connect.Response[v1.DeleteOrganizationResponse], error) {
	return c.deleteOrganization.CallUnary(ctx, req)
}

// GetOrganizationMember calls donezo.v1.OrganizationsService.GetOrganizationMember.
func (c *organizationsServiceClient) GetOrganizationMember(ctx context.Context, req *connect.Request[v1.GetOrganizationMemberRequest]) (*connect.Response[v1.GetOrganizationMemberResponse], error) {
	return c.getOrganizationMember.CallUnary(ctx, req)
}

// CreateOrganizationMember calls donezo.v1.OrganizationsService.CreateOrganizationMember.
func (c *organizationsServiceClient) CreateOrganizationMember(ctx context.Context, req *connect.Request[v1.CreateOrganizationMemberRequest]) (*connect.Response[v1.CreateOrganizationMemberResponse], error) {
	return c.createOrganizationMember.CallUnary(ctx, req)
}

// UpdateOrganizationMember calls donezo.v1.OrganizationsService.UpdateOrganizationMember.
func (c *organizationsServiceClient) UpdateOrganizationMember(ctx context.Context, req *connect.Request[v1.UpdateOrganizationMemberRequest]) (*connect.Response[v1.UpdateOrganizationMemberResponse], error) {
	return c.updateOrganizationMember.CallUnary(ctx, req)
}

// ListOrganizationMembers calls donezo.v1.OrganizationsService.ListOrganizationMembers.
func (c *organizationsServiceClient) ListOrganizationMembers(ctx context.Context, req *connect.Request[v1.ListOrganizationMembersRequest]) (*connect.Response[v1.ListOrganizationMembersResponse], error) {
	return c.listOrganizationMembers.CallUnary(ctx, req)
}

// DeleteOrganizationMember calls donezo.v1.OrganizationsService.DeleteOrganizationMember.
func (c *organizationsServiceClient) DeleteOrganizationMember(ctx context.Context, req *connect.Request[v1.DeleteOrganizationMemberRequest]) (*connect.Response[v1.DeleteOrganizationMemberResponse], error) {
	return c.deleteOrganizationMember.CallUnary(ctx, req)
}

// OrganizationsServiceHandler is an implementation of the donezo.v1.OrganizationsService service.
type OrganizationsServiceHandler interface {
	GetOrganization(context.Context, *connect.Request[v1.GetOrganizationRequest]) (*connect.Response[v1.GetOrganizationResponse], error)
	CreateOrganization(context.Context, *connect.Request[v1.CreateOrganizationRequest]) (*connect.Response[v1.CreateOrganizationResponse], error)
	UpdateOrganization(context.Context, *connect.Request[v1.UpdateOrganizationRequest]) (*connect.Response[v1.UpdateOrganizationResponse], error)
	ListOrganizations(context.Context, *connect.Request[v1.ListOrganizationsRequest]) (*connect.Response[v1.ListOrganizationsResponse], error)
	DeleteOrganization(context.Context, *connect.Request[v1.DeleteOrganizationRequest]) (*connect.Response[v1.DeleteOrganizationResponse], error)
	GetOrganizationMember(context.Context, *connect.Request[v1.GetOrganizationMemberRequest]) (*connect.Response[v1.GetOrganizationMemberResponse], error)
	CreateOrganizationMember(context.Context, *connect.Request[v1.CreateOrganizationMemberRequest]) (*connect.Response[v1.CreateOrganizationMemberResponse], error)
	UpdateOrganizationMember(context.Context, *connect.Request[v1.UpdateOrganizationMemberRequest]) (*connect.Response[v1.UpdateOrganizationMemberResponse], error)
	ListOrganizationMembers(context.Context, *connect.Request[v1.ListOrganizationMembersRequest]) (*connect.Response[v1.ListOrganizationMembersResponse], error)
	DeleteOrganizationMember(context.Context, *connect.Request[v1.DeleteOrganizationMemberRequest]) (*connect.Response[v1.DeleteOrganizationMemberResponse], error)
}

// NewOrganizationsServiceHandler builds an HTTP handler from the service implementation. It returns
// the path on which to mount the handler and the handler itself.
//
// By default, handlers support the Connect, gRPC, and gRPC-Web protocols with the binary Protobuf
// and JSON codecs. They also support gzip compression.
func NewOrganizationsServiceHandler(svc OrganizationsServiceHandler, opts ...connect.HandlerOption) (string, http.Handler) {
	organizationsServiceGetOrganizationHandler := connect.NewUnaryHandler(
		OrganizationsServiceGetOrganizationProcedure,
		svc.GetOrganization,
		connect.WithSchema(organizationsServiceGetOrganizationMethodDescriptor),
		connect.WithIdempotency(connect.IdempotencyNoSideEffects),
		connect.WithHandlerOptions(opts...),
	)
	organizationsServiceCreateOrganizationHandler := connect.NewUnaryHandler(
		OrganizationsServiceCreateOrganizationProcedure,
		svc.CreateOrganization,
		connect.WithSchema(organizationsServiceCreateOrganizationMethodDescriptor),
		connect.WithIdempotency(connect.IdempotencyIdempotent),
		connect.WithHandlerOptions(opts...),
	)
	organizationsServiceUpdateOrganizationHandler := connect.NewUnaryHandler(
		OrganizationsServiceUpdateOrganizationProcedure,
		svc.UpdateOrganization,
		connect.WithSchema(organizationsServiceUpdateOrganizationMethodDescriptor),
		connect.WithIdempotency(connect.IdempotencyIdempotent),
		connect.WithHandlerOptions(opts...),
	)
	organizationsServiceListOrganizationsHandler := connect.NewUnaryHandler(
		OrganizationsServiceListOrganizationsProcedure,
		svc.ListOrganizations,
		connect.WithSchema(organizationsServiceListOrganizationsMethodDescriptor),
		connect.WithIdempotency(connect.IdempotencyNoSideEffects),
		connect.WithHandlerOptions(opts...),
	)
	organizationsServiceDeleteOrganizationHandler := connect.NewUnaryHandler(
		OrganizationsServiceDeleteOrganizationProcedure,
		svc.DeleteOrganization,
		connect.WithSchema(organizationsServiceDeleteOrganizationMethodDescriptor),
		connect.WithIdempotency(connect.IdempotencyIdempotent),
		connect.WithHandlerOptions(opts...),
	)
	organizationsServiceGetOrganizationMemberHandler := connect.NewUnaryHandler(
		OrganizationsServiceGetOrganizationMemberProcedure,
		svc.GetOrganizationMember,
		connect.WithSchema(organizationsServiceGetOrganizationMemberMethodDescriptor),
		connect.WithIdempotency(connect.IdempotencyNoSideEffects),
		connect.WithHandlerOptions(opts...),
	)
	organizationsServiceCreateOrganizationMemberHandler := connect.NewUnaryHandler(
		OrganizationsServiceCreateOrganizationMemberProcedure,
		svc.CreateOrganizationMember,
		connect.WithSchema(organizationsServiceCreateOrganizationMemberMethodDescriptor),
		connect.WithIdempotency(connect.IdempotencyIdempotent),
		connect.WithHandlerOptions(opts...),
	)
	organizationsServiceUpdateOrganizationMemberHandler := connect.NewUnaryHandler(
		OrganizationsServiceUpdateOrganizationMemberProcedure,
		svc.UpdateOrganizationMember,
		connect.WithSchema(organizationsServiceUpdateOrganizationMemberMethodDescriptor),
		connect.WithIdempotency(connect.IdempotencyIdempotent),
		connect.WithHandlerOptions(opts...),
	)
	organizationsServiceListOrganizationMembersHandler := connect.NewUnaryHandler(
		OrganizationsServiceListOrganizationMembersProcedure,
		svc.ListOrganizationMembers,
		connect.WithSchema(organizationsServiceListOrganizationMembersMethodDescriptor),
		connect.WithIdempotency(connect.IdempotencyNoSideEffects),
		connect.WithHandlerOptions(opts...),
	)
	organizationsServiceDeleteOrganizationMemberHandler := connect.NewUnaryHandler(
		OrganizationsServiceDeleteOrganizationMemberProcedure,
		svc.DeleteOrganizationMember,
		connect.WithSchema(organizationsServiceDeleteOrganizationMemberMethodDescriptor),
		connect.WithIdempotency(connect.IdempotencyIdempotent),
		connect.WithHandlerOptions(opts...),
	)
	return "/donezo.v1.OrganizationsService/", http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		switch r.URL.Path {
		case OrganizationsServiceGetOrganizationProcedure:
			organizationsServiceGetOrganizationHandler.ServeHTTP(w, r)
		case OrganizationsServiceCreateOrganizationProcedure:
			organizationsServiceCreateOrganizationHandler.ServeHTTP(w, r)
		case OrganizationsServiceUpdateOrganizationProcedure:
			organizationsServiceUpdateOrganizationHandler.ServeHTTP(w, r)
		case OrganizationsServiceListOrganizationsProcedure:
			organizationsServiceListOrganizationsHandler.ServeHTTP(w, r)
		case OrganizationsServiceDeleteOrganizationProcedure:
			organizationsServiceDeleteOrganizationHandler.ServeHTTP(w, r)
		case OrganizationsServiceGetOrganizationMemberProcedure:
			organizationsServiceGetOrganizationMemberHandler.ServeHTTP(w, r)
		case OrganizationsServiceCreateOrganizationMemberProcedure:
			organizationsServiceCreateOrganizationMemberHandler.ServeHTTP(w, r)
		case OrganizationsServiceUpdateOrganizationMemberProcedure:
			organizationsServiceUpdateOrganizationMemberHandler.ServeHTTP(w, r)
		case OrganizationsServiceListOrganizationMembersProcedure:
			organizationsServiceListOrganizationMembersHandler.ServeHTTP(w, r)
		case OrganizationsServiceDeleteOrganizationMemberProcedure:
			organizationsServiceDeleteOrganizationMemberHandler.ServeHTTP(w, r)
		default:
			http.NotFound(w, r)
		}
	})
}

// UnimplementedOrganizationsServiceHandler returns CodeUnimplemented from all methods.
type UnimplementedOrganizationsServiceHandler struct{}

func (UnimplementedOrganizationsServiceHandler) GetOrganization(context.Context, *connect.Request[v1.GetOrganizationRequest]) (*connect.Response[v1.GetOrganizationResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("donezo.v1.OrganizationsService.GetOrganization is not implemented"))
}

func (UnimplementedOrganizationsServiceHandler) CreateOrganization(context.Context, *connect.Request[v1.CreateOrganizationRequest]) (*connect.Response[v1.CreateOrganizationResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("donezo.v1.OrganizationsService.CreateOrganization is not implemented"))
}

func (UnimplementedOrganizationsServiceHandler) UpdateOrganization(context.Context, *connect.Request[v1.UpdateOrganizationRequest]) (*connect.Response[v1.UpdateOrganizationResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("donezo.v1.OrganizationsService.UpdateOrganization is not implemented"))
}

func (UnimplementedOrganizationsServiceHandler) ListOrganizations(context.Context, *connect.Request[v1.ListOrganizationsRequest]) (*connect.Response[v1.ListOrganizationsResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("donezo.v1.OrganizationsService.ListOrganizations is not implemented"))
}

func (UnimplementedOrganizationsServiceHandler) DeleteOrganization(context.Context, *connect.Request[v1.DeleteOrganizationRequest]) (*connect.Response[v1.DeleteOrganizationResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("donezo.v1.OrganizationsService.DeleteOrganization is not implemented"))
}

func (UnimplementedOrganizationsServiceHandler) GetOrganizationMember(context.Context, *connect.Request[v1.GetOrganizationMemberRequest]) (*connect.Response[v1.GetOrganizationMemberResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("donezo.v1.OrganizationsService.GetOrganizationMember is not implemented"))
}

func (UnimplementedOrganizationsServiceHandler) CreateOrganizationMember(context.Context, *connect.Request[v1.CreateOrganizationMemberRequest]) (*connect.Response[v1.CreateOrganizationMemberResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("donezo.v1.OrganizationsService.CreateOrganizationMember is not implemented"))
}

func (UnimplementedOrganizationsServiceHandler) UpdateOrganizationMember(context.Context, *connect.Request[v1.UpdateOrganizationMemberRequest]) (*connect.Response[v1.UpdateOrganizationMemberResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("donezo.v1.OrganizationsService.UpdateOrganizationMember is not implemented"))
}

func (UnimplementedOrganizationsServiceHandler) ListOrganizationMembers(context.Context, *connect.Request[v1.ListOrganizationMembersRequest]) (*connect.Response[v1.ListOrganizationMembersResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("donezo.v1.OrganizationsService.ListOrganizationMembers is not implemented"))
}

func (UnimplementedOrganizationsServiceHandler) DeleteOrganizationMember(context.Context, *connect.Request[v1.DeleteOrganizationMemberRequest]) (*connect.Response[v1.DeleteOrganizationMemberResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("donezo.v1.OrganizationsService.DeleteOrganizationMember is not implemented"))
}

// ProjectsServiceClient is a client for the donezo.v1.ProjectsService service.
type ProjectsServiceClient interface {
	GetProject(context.Context, *connect.Request[v1.GetProjectRequest]) (*connect.Response[v1.GetProjectResponse], error)
	CreateProject(context.Context, *connect.Request[v1.CreateProjectRequest]) (*connect.Response[v1.CreateProjectResponse], error)
	UpdateProject(context.Context, *connect.Request[v1.UpdateProjectRequest]) (*connect.Response[v1.UpdateProjectResponse], error)
	ListProjects(context.Context, *connect.Request[v1.ListProjectsRequest]) (*connect.Response[v1.ListProjectsResponse], error)
	DeleteProject(context.Context, *connect.Request[v1.DeleteProjectRequest]) (*connect.Response[v1.DeleteProjectResponse], error)
}

// NewProjectsServiceClient constructs a client for the donezo.v1.ProjectsService service. By
// default, it uses the Connect protocol with the binary Protobuf Codec, asks for gzipped responses,
// and sends uncompressed requests. To use the gRPC or gRPC-Web protocols, supply the
// connect.WithGRPC() or connect.WithGRPCWeb() options.
//
// The URL supplied here should be the base URL for the Connect or gRPC server (for example,
// http://api.acme.com or https://acme.com/grpc).
func NewProjectsServiceClient(httpClient connect.HTTPClient, baseURL string, opts ...connect.ClientOption) ProjectsServiceClient {
	baseURL = strings.TrimRight(baseURL, "/")
	return &projectsServiceClient{
		getProject: connect.NewClient[v1.GetProjectRequest, v1.GetProjectResponse](
			httpClient,
			baseURL+ProjectsServiceGetProjectProcedure,
			connect.WithSchema(projectsServiceGetProjectMethodDescriptor),
			connect.WithIdempotency(connect.IdempotencyNoSideEffects),
			connect.WithClientOptions(opts...),
		),
		createProject: connect.NewClient[v1.CreateProjectRequest, v1.CreateProjectResponse](
			httpClient,
			baseURL+ProjectsServiceCreateProjectProcedure,
			connect.WithSchema(projectsServiceCreateProjectMethodDescriptor),
			connect.WithIdempotency(connect.IdempotencyIdempotent),
			connect.WithClientOptions(opts...),
		),
		updateProject: connect.NewClient[v1.UpdateProjectRequest, v1.UpdateProjectResponse](
			httpClient,
			baseURL+ProjectsServiceUpdateProjectProcedure,
			connect.WithSchema(projectsServiceUpdateProjectMethodDescriptor),
			connect.WithIdempotency(connect.IdempotencyIdempotent),
			connect.WithClientOptions(opts...),
		),
		listProjects: connect.NewClient[v1.ListProjectsRequest, v1.ListProjectsResponse](
			httpClient,
			baseURL+ProjectsServiceListProjectsProcedure,
			connect.WithSchema(projectsServiceListProjectsMethodDescriptor),
			connect.WithIdempotency(connect.IdempotencyNoSideEffects),
			connect.WithClientOptions(opts...),
		),
		deleteProject: connect.NewClient[v1.DeleteProjectRequest, v1.DeleteProjectResponse](
			httpClient,
			baseURL+ProjectsServiceDeleteProjectProcedure,
			connect.WithSchema(projectsServiceDeleteProjectMethodDescriptor),
			connect.WithIdempotency(connect.IdempotencyIdempotent),
			connect.WithClientOptions(opts...),
		),
	}
}

// projectsServiceClient implements ProjectsServiceClient.
type projectsServiceClient struct {
	getProject    *connect.Client[v1.GetProjectRequest, v1.GetProjectResponse]
	createProject *connect.Client[v1.CreateProjectRequest, v1.CreateProjectResponse]
	updateProject *connect.Client[v1.UpdateProjectRequest, v1.UpdateProjectResponse]
	listProjects  *connect.Client[v1.ListProjectsRequest, v1.ListProjectsResponse]
	deleteProject *connect.Client[v1.DeleteProjectRequest, v1.DeleteProjectResponse]
}

// GetProject calls donezo.v1.ProjectsService.GetProject.
func (c *projectsServiceClient) GetProject(ctx context.Context, req *connect.Request[v1.GetProjectRequest]) (*connect.Response[v1.GetProjectResponse], error) {
	return c.getProject.CallUnary(ctx, req)
}

// CreateProject calls donezo.v1.ProjectsService.CreateProject.
func (c *projectsServiceClient) CreateProject(ctx context.Context, req *connect.Request[v1.CreateProjectRequest]) (*connect.Response[v1.CreateProjectResponse], error) {
	return c.createProject.CallUnary(ctx, req)
}

// UpdateProject calls donezo.v1.ProjectsService.UpdateProject.
func (c *projectsServiceClient) UpdateProject(ctx context.Context, req *connect.Request[v1.UpdateProjectRequest]) (*connect.Response[v1.UpdateProjectResponse], error) {
	return c.updateProject.CallUnary(ctx, req)
}

// ListProjects calls donezo.v1.ProjectsService.ListProjects.
func (c *projectsServiceClient) ListProjects(ctx context.Context, req *connect.Request[v1.ListProjectsRequest]) (*connect.Response[v1.ListProjectsResponse], error) {
	return c.listProjects.CallUnary(ctx, req)
}

// DeleteProject calls donezo.v1.ProjectsService.DeleteProject.
func (c *projectsServiceClient) DeleteProject(ctx context.Context, req *connect.Request[v1.DeleteProjectRequest]) (*connect.Response[v1.DeleteProjectResponse], error) {
	return c.deleteProject.CallUnary(ctx, req)
}

// ProjectsServiceHandler is an implementation of the donezo.v1.ProjectsService service.
type ProjectsServiceHandler interface {
	GetProject(context.Context, *connect.Request[v1.GetProjectRequest]) (*connect.Response[v1.GetProjectResponse], error)
	CreateProject(context.Context, *connect.Request[v1.CreateProjectRequest]) (*connect.Response[v1.CreateProjectResponse], error)
	UpdateProject(context.Context, *connect.Request[v1.UpdateProjectRequest]) (*connect.Response[v1.UpdateProjectResponse], error)
	ListProjects(context.Context, *connect.Request[v1.ListProjectsRequest]) (*connect.Response[v1.ListProjectsResponse], error)
	DeleteProject(context.Context, *connect.Request[v1.DeleteProjectRequest]) (*connect.Response[v1.DeleteProjectResponse], error)
}

// NewProjectsServiceHandler builds an HTTP handler from the service implementation. It returns the
// path on which to mount the handler and the handler itself.
//
// By default, handlers support the Connect, gRPC, and gRPC-Web protocols with the binary Protobuf
// and JSON codecs. They also support gzip compression.
func NewProjectsServiceHandler(svc ProjectsServiceHandler, opts ...connect.HandlerOption) (string, http.Handler) {
	projectsServiceGetProjectHandler := connect.NewUnaryHandler(
		ProjectsServiceGetProjectProcedure,
		svc.GetProject,
		connect.WithSchema(projectsServiceGetProjectMethodDescriptor),
		connect.WithIdempotency(connect.IdempotencyNoSideEffects),
		connect.WithHandlerOptions(opts...),
	)
	projectsServiceCreateProjectHandler := connect.NewUnaryHandler(
		ProjectsServiceCreateProjectProcedure,
		svc.CreateProject,
		connect.WithSchema(projectsServiceCreateProjectMethodDescriptor),
		connect.WithIdempotency(connect.IdempotencyIdempotent),
		connect.WithHandlerOptions(opts...),
	)
	projectsServiceUpdateProjectHandler := connect.NewUnaryHandler(
		ProjectsServiceUpdateProjectProcedure,
		svc.UpdateProject,
		connect.WithSchema(projectsServiceUpdateProjectMethodDescriptor),
		connect.WithIdempotency(connect.IdempotencyIdempotent),
		connect.WithHandlerOptions(opts...),
	)
	projectsServiceListProjectsHandler := connect.NewUnaryHandler(
		ProjectsServiceListProjectsProcedure,
		svc.ListProjects,
		connect.WithSchema(projectsServiceListProjectsMethodDescriptor),
		connect.WithIdempotency(connect.IdempotencyNoSideEffects),
		connect.WithHandlerOptions(opts...),
	)
	projectsServiceDeleteProjectHandler := connect.NewUnaryHandler(
		ProjectsServiceDeleteProjectProcedure,
		svc.DeleteProject,
		connect.WithSchema(projectsServiceDeleteProjectMethodDescriptor),
		connect.WithIdempotency(connect.IdempotencyIdempotent),
		connect.WithHandlerOptions(opts...),
	)
	return "/donezo.v1.ProjectsService/", http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		switch r.URL.Path {
		case ProjectsServiceGetProjectProcedure:
			projectsServiceGetProjectHandler.ServeHTTP(w, r)
		case ProjectsServiceCreateProjectProcedure:
			projectsServiceCreateProjectHandler.ServeHTTP(w, r)
		case ProjectsServiceUpdateProjectProcedure:
			projectsServiceUpdateProjectHandler.ServeHTTP(w, r)
		case ProjectsServiceListProjectsProcedure:
			projectsServiceListProjectsHandler.ServeHTTP(w, r)
		case ProjectsServiceDeleteProjectProcedure:
			projectsServiceDeleteProjectHandler.ServeHTTP(w, r)
		default:
			http.NotFound(w, r)
		}
	})
}

// UnimplementedProjectsServiceHandler returns CodeUnimplemented from all methods.
type UnimplementedProjectsServiceHandler struct{}

func (UnimplementedProjectsServiceHandler) GetProject(context.Context, *connect.Request[v1.GetProjectRequest]) (*connect.Response[v1.GetProjectResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("donezo.v1.ProjectsService.GetProject is not implemented"))
}

func (UnimplementedProjectsServiceHandler) CreateProject(context.Context, *connect.Request[v1.CreateProjectRequest]) (*connect.Response[v1.CreateProjectResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("donezo.v1.ProjectsService.CreateProject is not implemented"))
}

func (UnimplementedProjectsServiceHandler) UpdateProject(context.Context, *connect.Request[v1.UpdateProjectRequest]) (*connect.Response[v1.UpdateProjectResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("donezo.v1.ProjectsService.UpdateProject is not implemented"))
}

func (UnimplementedProjectsServiceHandler) ListProjects(context.Context, *connect.Request[v1.ListProjectsRequest]) (*connect.Response[v1.ListProjectsResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("donezo.v1.ProjectsService.ListProjects is not implemented"))
}

func (UnimplementedProjectsServiceHandler) DeleteProject(context.Context, *connect.Request[v1.DeleteProjectRequest]) (*connect.Response[v1.DeleteProjectResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("donezo.v1.ProjectsService.DeleteProject is not implemented"))
}

// UsersServiceClient is a client for the donezo.v1.UsersService service.
type UsersServiceClient interface {
	GetUser(context.Context, *connect.Request[v1.GetUserRequest]) (*connect.Response[v1.GetUserResponse], error)
	CreateUser(context.Context, *connect.Request[v1.CreateUserRequest]) (*connect.Response[v1.CreateUserResponse], error)
	UpdateUser(context.Context, *connect.Request[v1.UpdateUserRequest]) (*connect.Response[v1.UpdateUserResponse], error)
	ListUsers(context.Context, *connect.Request[v1.ListUsersRequest]) (*connect.Response[v1.ListUsersResponse], error)
	DeleteUser(context.Context, *connect.Request[v1.DeleteUserRequest]) (*connect.Response[v1.DeleteUserResponse], error)
}

// NewUsersServiceClient constructs a client for the donezo.v1.UsersService service. By default, it
// uses the Connect protocol with the binary Protobuf Codec, asks for gzipped responses, and sends
// uncompressed requests. To use the gRPC or gRPC-Web protocols, supply the connect.WithGRPC() or
// connect.WithGRPCWeb() options.
//
// The URL supplied here should be the base URL for the Connect or gRPC server (for example,
// http://api.acme.com or https://acme.com/grpc).
func NewUsersServiceClient(httpClient connect.HTTPClient, baseURL string, opts ...connect.ClientOption) UsersServiceClient {
	baseURL = strings.TrimRight(baseURL, "/")
	return &usersServiceClient{
		getUser: connect.NewClient[v1.GetUserRequest, v1.GetUserResponse](
			httpClient,
			baseURL+UsersServiceGetUserProcedure,
			connect.WithSchema(usersServiceGetUserMethodDescriptor),
			connect.WithIdempotency(connect.IdempotencyNoSideEffects),
			connect.WithClientOptions(opts...),
		),
		createUser: connect.NewClient[v1.CreateUserRequest, v1.CreateUserResponse](
			httpClient,
			baseURL+UsersServiceCreateUserProcedure,
			connect.WithSchema(usersServiceCreateUserMethodDescriptor),
			connect.WithIdempotency(connect.IdempotencyIdempotent),
			connect.WithClientOptions(opts...),
		),
		updateUser: connect.NewClient[v1.UpdateUserRequest, v1.UpdateUserResponse](
			httpClient,
			baseURL+UsersServiceUpdateUserProcedure,
			connect.WithSchema(usersServiceUpdateUserMethodDescriptor),
			connect.WithIdempotency(connect.IdempotencyIdempotent),
			connect.WithClientOptions(opts...),
		),
		listUsers: connect.NewClient[v1.ListUsersRequest, v1.ListUsersResponse](
			httpClient,
			baseURL+UsersServiceListUsersProcedure,
			connect.WithSchema(usersServiceListUsersMethodDescriptor),
			connect.WithIdempotency(connect.IdempotencyNoSideEffects),
			connect.WithClientOptions(opts...),
		),
		deleteUser: connect.NewClient[v1.DeleteUserRequest, v1.DeleteUserResponse](
			httpClient,
			baseURL+UsersServiceDeleteUserProcedure,
			connect.WithSchema(usersServiceDeleteUserMethodDescriptor),
			connect.WithIdempotency(connect.IdempotencyIdempotent),
			connect.WithClientOptions(opts...),
		),
	}
}

// usersServiceClient implements UsersServiceClient.
type usersServiceClient struct {
	getUser    *connect.Client[v1.GetUserRequest, v1.GetUserResponse]
	createUser *connect.Client[v1.CreateUserRequest, v1.CreateUserResponse]
	updateUser *connect.Client[v1.UpdateUserRequest, v1.UpdateUserResponse]
	listUsers  *connect.Client[v1.ListUsersRequest, v1.ListUsersResponse]
	deleteUser *connect.Client[v1.DeleteUserRequest, v1.DeleteUserResponse]
}

// GetUser calls donezo.v1.UsersService.GetUser.
func (c *usersServiceClient) GetUser(ctx context.Context, req *connect.Request[v1.GetUserRequest]) (*connect.Response[v1.GetUserResponse], error) {
	return c.getUser.CallUnary(ctx, req)
}

// CreateUser calls donezo.v1.UsersService.CreateUser.
func (c *usersServiceClient) CreateUser(ctx context.Context, req *connect.Request[v1.CreateUserRequest]) (*connect.Response[v1.CreateUserResponse], error) {
	return c.createUser.CallUnary(ctx, req)
}

// UpdateUser calls donezo.v1.UsersService.UpdateUser.
func (c *usersServiceClient) UpdateUser(ctx context.Context, req *connect.Request[v1.UpdateUserRequest]) (*connect.Response[v1.UpdateUserResponse], error) {
	return c.updateUser.CallUnary(ctx, req)
}

// ListUsers calls donezo.v1.UsersService.ListUsers.
func (c *usersServiceClient) ListUsers(ctx context.Context, req *connect.Request[v1.ListUsersRequest]) (*connect.Response[v1.ListUsersResponse], error) {
	return c.listUsers.CallUnary(ctx, req)
}

// DeleteUser calls donezo.v1.UsersService.DeleteUser.
func (c *usersServiceClient) DeleteUser(ctx context.Context, req *connect.Request[v1.DeleteUserRequest]) (*connect.Response[v1.DeleteUserResponse], error) {
	return c.deleteUser.CallUnary(ctx, req)
}

// UsersServiceHandler is an implementation of the donezo.v1.UsersService service.
type UsersServiceHandler interface {
	GetUser(context.Context, *connect.Request[v1.GetUserRequest]) (*connect.Response[v1.GetUserResponse], error)
	CreateUser(context.Context, *connect.Request[v1.CreateUserRequest]) (*connect.Response[v1.CreateUserResponse], error)
	UpdateUser(context.Context, *connect.Request[v1.UpdateUserRequest]) (*connect.Response[v1.UpdateUserResponse], error)
	ListUsers(context.Context, *connect.Request[v1.ListUsersRequest]) (*connect.Response[v1.ListUsersResponse], error)
	DeleteUser(context.Context, *connect.Request[v1.DeleteUserRequest]) (*connect.Response[v1.DeleteUserResponse], error)
}

// NewUsersServiceHandler builds an HTTP handler from the service implementation. It returns the
// path on which to mount the handler and the handler itself.
//
// By default, handlers support the Connect, gRPC, and gRPC-Web protocols with the binary Protobuf
// and JSON codecs. They also support gzip compression.
func NewUsersServiceHandler(svc UsersServiceHandler, opts ...connect.HandlerOption) (string, http.Handler) {
	usersServiceGetUserHandler := connect.NewUnaryHandler(
		UsersServiceGetUserProcedure,
		svc.GetUser,
		connect.WithSchema(usersServiceGetUserMethodDescriptor),
		connect.WithIdempotency(connect.IdempotencyNoSideEffects),
		connect.WithHandlerOptions(opts...),
	)
	usersServiceCreateUserHandler := connect.NewUnaryHandler(
		UsersServiceCreateUserProcedure,
		svc.CreateUser,
		connect.WithSchema(usersServiceCreateUserMethodDescriptor),
		connect.WithIdempotency(connect.IdempotencyIdempotent),
		connect.WithHandlerOptions(opts...),
	)
	usersServiceUpdateUserHandler := connect.NewUnaryHandler(
		UsersServiceUpdateUserProcedure,
		svc.UpdateUser,
		connect.WithSchema(usersServiceUpdateUserMethodDescriptor),
		connect.WithIdempotency(connect.IdempotencyIdempotent),
		connect.WithHandlerOptions(opts...),
	)
	usersServiceListUsersHandler := connect.NewUnaryHandler(
		UsersServiceListUsersProcedure,
		svc.ListUsers,
		connect.WithSchema(usersServiceListUsersMethodDescriptor),
		connect.WithIdempotency(connect.IdempotencyNoSideEffects),
		connect.WithHandlerOptions(opts...),
	)
	usersServiceDeleteUserHandler := connect.NewUnaryHandler(
		UsersServiceDeleteUserProcedure,
		svc.DeleteUser,
		connect.WithSchema(usersServiceDeleteUserMethodDescriptor),
		connect.WithIdempotency(connect.IdempotencyIdempotent),
		connect.WithHandlerOptions(opts...),
	)
	return "/donezo.v1.UsersService/", http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		switch r.URL.Path {
		case UsersServiceGetUserProcedure:
			usersServiceGetUserHandler.ServeHTTP(w, r)
		case UsersServiceCreateUserProcedure:
			usersServiceCreateUserHandler.ServeHTTP(w, r)
		case UsersServiceUpdateUserProcedure:
			usersServiceUpdateUserHandler.ServeHTTP(w, r)
		case UsersServiceListUsersProcedure:
			usersServiceListUsersHandler.ServeHTTP(w, r)
		case UsersServiceDeleteUserProcedure:
			usersServiceDeleteUserHandler.ServeHTTP(w, r)
		default:
			http.NotFound(w, r)
		}
	})
}

// UnimplementedUsersServiceHandler returns CodeUnimplemented from all methods.
type UnimplementedUsersServiceHandler struct{}

func (UnimplementedUsersServiceHandler) GetUser(context.Context, *connect.Request[v1.GetUserRequest]) (*connect.Response[v1.GetUserResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("donezo.v1.UsersService.GetUser is not implemented"))
}

func (UnimplementedUsersServiceHandler) CreateUser(context.Context, *connect.Request[v1.CreateUserRequest]) (*connect.Response[v1.CreateUserResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("donezo.v1.UsersService.CreateUser is not implemented"))
}

func (UnimplementedUsersServiceHandler) UpdateUser(context.Context, *connect.Request[v1.UpdateUserRequest]) (*connect.Response[v1.UpdateUserResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("donezo.v1.UsersService.UpdateUser is not implemented"))
}

func (UnimplementedUsersServiceHandler) ListUsers(context.Context, *connect.Request[v1.ListUsersRequest]) (*connect.Response[v1.ListUsersResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("donezo.v1.UsersService.ListUsers is not implemented"))
}

func (UnimplementedUsersServiceHandler) DeleteUser(context.Context, *connect.Request[v1.DeleteUserRequest]) (*connect.Response[v1.DeleteUserResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("donezo.v1.UsersService.DeleteUser is not implemented"))
}
