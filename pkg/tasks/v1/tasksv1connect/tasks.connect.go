// Code generated by protoc-gen-connect-go. DO NOT EDIT.
//
// Source: proto/tasks/v1/tasks.proto

package tasksv1connect

import (
	connect "connectrpc.com/connect"
	context "context"
	errors "errors"
	v1 "github.com/picatz/go-connect-aws-lambda-dynamodb/pkg/tasks/v1"
	http "net/http"
	strings "strings"
)

// This is a compile-time assertion to ensure that this generated file and the connect package are
// compatible. If you get a compiler error that this constant is not defined, this code was
// generated with a version of connect newer than the one compiled into your binary. You can fix the
// problem by either regenerating this code with an older version of connect or updating the connect
// version compiled into your binary.
const _ = connect.IsAtLeastVersion1_13_0

const (
	// TasksServiceName is the fully-qualified name of the TasksService service.
	TasksServiceName = "tasks.v1.TasksService"
)

// These constants are the fully-qualified names of the RPCs defined in this package. They're
// exposed at runtime as Spec.Procedure and as the final two segments of the HTTP route.
//
// Note that these are different from the fully-qualified method names used by
// google.golang.org/protobuf/reflect/protoreflect. To convert from these constants to
// reflection-formatted method names, remove the leading slash and convert the remaining slash to a
// period.
const (
	// TasksServiceGetTaskProcedure is the fully-qualified name of the TasksService's GetTask RPC.
	TasksServiceGetTaskProcedure = "/tasks.v1.TasksService/GetTask"
	// TasksServiceCreateTaskProcedure is the fully-qualified name of the TasksService's CreateTask RPC.
	TasksServiceCreateTaskProcedure = "/tasks.v1.TasksService/CreateTask"
	// TasksServiceUpdateTaskProcedure is the fully-qualified name of the TasksService's UpdateTask RPC.
	TasksServiceUpdateTaskProcedure = "/tasks.v1.TasksService/UpdateTask"
	// TasksServiceDeleteTaskProcedure is the fully-qualified name of the TasksService's DeleteTask RPC.
	TasksServiceDeleteTaskProcedure = "/tasks.v1.TasksService/DeleteTask"
	// TasksServiceListTasksProcedure is the fully-qualified name of the TasksService's ListTasks RPC.
	TasksServiceListTasksProcedure = "/tasks.v1.TasksService/ListTasks"
)

// These variables are the protoreflect.Descriptor objects for the RPCs defined in this package.
var (
	tasksServiceServiceDescriptor          = v1.File_proto_tasks_v1_tasks_proto.Services().ByName("TasksService")
	tasksServiceGetTaskMethodDescriptor    = tasksServiceServiceDescriptor.Methods().ByName("GetTask")
	tasksServiceCreateTaskMethodDescriptor = tasksServiceServiceDescriptor.Methods().ByName("CreateTask")
	tasksServiceUpdateTaskMethodDescriptor = tasksServiceServiceDescriptor.Methods().ByName("UpdateTask")
	tasksServiceDeleteTaskMethodDescriptor = tasksServiceServiceDescriptor.Methods().ByName("DeleteTask")
	tasksServiceListTasksMethodDescriptor  = tasksServiceServiceDescriptor.Methods().ByName("ListTasks")
)

// TasksServiceClient is a client for the tasks.v1.TasksService service.
type TasksServiceClient interface {
	GetTask(context.Context, *connect.Request[v1.GetTaskRequest]) (*connect.Response[v1.GetTaskResponse], error)
	CreateTask(context.Context, *connect.Request[v1.CreateTaskRequest]) (*connect.Response[v1.CreateTaskResponse], error)
	UpdateTask(context.Context, *connect.Request[v1.UpdateTaskRequest]) (*connect.Response[v1.UpdateTaskResponse], error)
	DeleteTask(context.Context, *connect.Request[v1.DeleteTaskRequest]) (*connect.Response[v1.DeleteTaskResponse], error)
	ListTasks(context.Context, *connect.Request[v1.ListTasksRequest]) (*connect.Response[v1.ListTasksResponse], error)
}

// NewTasksServiceClient constructs a client for the tasks.v1.TasksService service. By default, it
// uses the Connect protocol with the binary Protobuf Codec, asks for gzipped responses, and sends
// uncompressed requests. To use the gRPC or gRPC-Web protocols, supply the connect.WithGRPC() or
// connect.WithGRPCWeb() options.
//
// The URL supplied here should be the base URL for the Connect or gRPC server (for example,
// http://api.acme.com or https://acme.com/grpc).
func NewTasksServiceClient(httpClient connect.HTTPClient, baseURL string, opts ...connect.ClientOption) TasksServiceClient {
	baseURL = strings.TrimRight(baseURL, "/")
	return &tasksServiceClient{
		getTask: connect.NewClient[v1.GetTaskRequest, v1.GetTaskResponse](
			httpClient,
			baseURL+TasksServiceGetTaskProcedure,
			connect.WithSchema(tasksServiceGetTaskMethodDescriptor),
			connect.WithIdempotency(connect.IdempotencyNoSideEffects),
			connect.WithClientOptions(opts...),
		),
		createTask: connect.NewClient[v1.CreateTaskRequest, v1.CreateTaskResponse](
			httpClient,
			baseURL+TasksServiceCreateTaskProcedure,
			connect.WithSchema(tasksServiceCreateTaskMethodDescriptor),
			connect.WithIdempotency(connect.IdempotencyIdempotent),
			connect.WithClientOptions(opts...),
		),
		updateTask: connect.NewClient[v1.UpdateTaskRequest, v1.UpdateTaskResponse](
			httpClient,
			baseURL+TasksServiceUpdateTaskProcedure,
			connect.WithSchema(tasksServiceUpdateTaskMethodDescriptor),
			connect.WithIdempotency(connect.IdempotencyIdempotent),
			connect.WithClientOptions(opts...),
		),
		deleteTask: connect.NewClient[v1.DeleteTaskRequest, v1.DeleteTaskResponse](
			httpClient,
			baseURL+TasksServiceDeleteTaskProcedure,
			connect.WithSchema(tasksServiceDeleteTaskMethodDescriptor),
			connect.WithIdempotency(connect.IdempotencyIdempotent),
			connect.WithClientOptions(opts...),
		),
		listTasks: connect.NewClient[v1.ListTasksRequest, v1.ListTasksResponse](
			httpClient,
			baseURL+TasksServiceListTasksProcedure,
			connect.WithSchema(tasksServiceListTasksMethodDescriptor),
			connect.WithIdempotency(connect.IdempotencyNoSideEffects),
			connect.WithClientOptions(opts...),
		),
	}
}

// tasksServiceClient implements TasksServiceClient.
type tasksServiceClient struct {
	getTask    *connect.Client[v1.GetTaskRequest, v1.GetTaskResponse]
	createTask *connect.Client[v1.CreateTaskRequest, v1.CreateTaskResponse]
	updateTask *connect.Client[v1.UpdateTaskRequest, v1.UpdateTaskResponse]
	deleteTask *connect.Client[v1.DeleteTaskRequest, v1.DeleteTaskResponse]
	listTasks  *connect.Client[v1.ListTasksRequest, v1.ListTasksResponse]
}

// GetTask calls tasks.v1.TasksService.GetTask.
func (c *tasksServiceClient) GetTask(ctx context.Context, req *connect.Request[v1.GetTaskRequest]) (*connect.Response[v1.GetTaskResponse], error) {
	return c.getTask.CallUnary(ctx, req)
}

// CreateTask calls tasks.v1.TasksService.CreateTask.
func (c *tasksServiceClient) CreateTask(ctx context.Context, req *connect.Request[v1.CreateTaskRequest]) (*connect.Response[v1.CreateTaskResponse], error) {
	return c.createTask.CallUnary(ctx, req)
}

// UpdateTask calls tasks.v1.TasksService.UpdateTask.
func (c *tasksServiceClient) UpdateTask(ctx context.Context, req *connect.Request[v1.UpdateTaskRequest]) (*connect.Response[v1.UpdateTaskResponse], error) {
	return c.updateTask.CallUnary(ctx, req)
}

// DeleteTask calls tasks.v1.TasksService.DeleteTask.
func (c *tasksServiceClient) DeleteTask(ctx context.Context, req *connect.Request[v1.DeleteTaskRequest]) (*connect.Response[v1.DeleteTaskResponse], error) {
	return c.deleteTask.CallUnary(ctx, req)
}

// ListTasks calls tasks.v1.TasksService.ListTasks.
func (c *tasksServiceClient) ListTasks(ctx context.Context, req *connect.Request[v1.ListTasksRequest]) (*connect.Response[v1.ListTasksResponse], error) {
	return c.listTasks.CallUnary(ctx, req)
}

// TasksServiceHandler is an implementation of the tasks.v1.TasksService service.
type TasksServiceHandler interface {
	GetTask(context.Context, *connect.Request[v1.GetTaskRequest]) (*connect.Response[v1.GetTaskResponse], error)
	CreateTask(context.Context, *connect.Request[v1.CreateTaskRequest]) (*connect.Response[v1.CreateTaskResponse], error)
	UpdateTask(context.Context, *connect.Request[v1.UpdateTaskRequest]) (*connect.Response[v1.UpdateTaskResponse], error)
	DeleteTask(context.Context, *connect.Request[v1.DeleteTaskRequest]) (*connect.Response[v1.DeleteTaskResponse], error)
	ListTasks(context.Context, *connect.Request[v1.ListTasksRequest]) (*connect.Response[v1.ListTasksResponse], error)
}

// NewTasksServiceHandler builds an HTTP handler from the service implementation. It returns the
// path on which to mount the handler and the handler itself.
//
// By default, handlers support the Connect, gRPC, and gRPC-Web protocols with the binary Protobuf
// and JSON codecs. They also support gzip compression.
func NewTasksServiceHandler(svc TasksServiceHandler, opts ...connect.HandlerOption) (string, http.Handler) {
	tasksServiceGetTaskHandler := connect.NewUnaryHandler(
		TasksServiceGetTaskProcedure,
		svc.GetTask,
		connect.WithSchema(tasksServiceGetTaskMethodDescriptor),
		connect.WithIdempotency(connect.IdempotencyNoSideEffects),
		connect.WithHandlerOptions(opts...),
	)
	tasksServiceCreateTaskHandler := connect.NewUnaryHandler(
		TasksServiceCreateTaskProcedure,
		svc.CreateTask,
		connect.WithSchema(tasksServiceCreateTaskMethodDescriptor),
		connect.WithIdempotency(connect.IdempotencyIdempotent),
		connect.WithHandlerOptions(opts...),
	)
	tasksServiceUpdateTaskHandler := connect.NewUnaryHandler(
		TasksServiceUpdateTaskProcedure,
		svc.UpdateTask,
		connect.WithSchema(tasksServiceUpdateTaskMethodDescriptor),
		connect.WithIdempotency(connect.IdempotencyIdempotent),
		connect.WithHandlerOptions(opts...),
	)
	tasksServiceDeleteTaskHandler := connect.NewUnaryHandler(
		TasksServiceDeleteTaskProcedure,
		svc.DeleteTask,
		connect.WithSchema(tasksServiceDeleteTaskMethodDescriptor),
		connect.WithIdempotency(connect.IdempotencyIdempotent),
		connect.WithHandlerOptions(opts...),
	)
	tasksServiceListTasksHandler := connect.NewUnaryHandler(
		TasksServiceListTasksProcedure,
		svc.ListTasks,
		connect.WithSchema(tasksServiceListTasksMethodDescriptor),
		connect.WithIdempotency(connect.IdempotencyNoSideEffects),
		connect.WithHandlerOptions(opts...),
	)
	return "/tasks.v1.TasksService/", http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		switch r.URL.Path {
		case TasksServiceGetTaskProcedure:
			tasksServiceGetTaskHandler.ServeHTTP(w, r)
		case TasksServiceCreateTaskProcedure:
			tasksServiceCreateTaskHandler.ServeHTTP(w, r)
		case TasksServiceUpdateTaskProcedure:
			tasksServiceUpdateTaskHandler.ServeHTTP(w, r)
		case TasksServiceDeleteTaskProcedure:
			tasksServiceDeleteTaskHandler.ServeHTTP(w, r)
		case TasksServiceListTasksProcedure:
			tasksServiceListTasksHandler.ServeHTTP(w, r)
		default:
			http.NotFound(w, r)
		}
	})
}

// UnimplementedTasksServiceHandler returns CodeUnimplemented from all methods.
type UnimplementedTasksServiceHandler struct{}

func (UnimplementedTasksServiceHandler) GetTask(context.Context, *connect.Request[v1.GetTaskRequest]) (*connect.Response[v1.GetTaskResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("tasks.v1.TasksService.GetTask is not implemented"))
}

func (UnimplementedTasksServiceHandler) CreateTask(context.Context, *connect.Request[v1.CreateTaskRequest]) (*connect.Response[v1.CreateTaskResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("tasks.v1.TasksService.CreateTask is not implemented"))
}

func (UnimplementedTasksServiceHandler) UpdateTask(context.Context, *connect.Request[v1.UpdateTaskRequest]) (*connect.Response[v1.UpdateTaskResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("tasks.v1.TasksService.UpdateTask is not implemented"))
}

func (UnimplementedTasksServiceHandler) DeleteTask(context.Context, *connect.Request[v1.DeleteTaskRequest]) (*connect.Response[v1.DeleteTaskResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("tasks.v1.TasksService.DeleteTask is not implemented"))
}

func (UnimplementedTasksServiceHandler) ListTasks(context.Context, *connect.Request[v1.ListTasksRequest]) (*connect.Response[v1.ListTasksResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("tasks.v1.TasksService.ListTasks is not implemented"))
}
