syntax = "proto3";

package tasks.v1;

import "buf/validate/validate.proto";
// import "google/api/annotations.proto";
import "google/protobuf/field_mask.proto";
// import "protoc-gen-openapiv2/options/annotations.proto";

option go_package = "github.com/picatz/go-connect-aws-lambda-dynamodb/pkg/tasks/v1;tasksv1";

message Task {
  string id = 1 [(buf.validate.field).string.min_len = 1];
  string title = 2 [(buf.validate.field).string.max_len = 256];
  optional string description = 3 [(buf.validate.field).string.max_len = 2048];
  bool completed = 4;
}

message GetTaskRequest {
  string id = 1 [(buf.validate.field).string.min_len = 1];
}

message GetTaskResponse {
  Task task = 1 [(buf.validate.field).required = true];
}

message CreateTaskRequest {
  string title = 1 [(buf.validate.field).string.min_len = 1];
  optional string description = 2 [(buf.validate.field).string.max_len = 2048];
  optional bool completed = 3;
}

message CreateTaskResponse {
  Task task = 1 [(buf.validate.field).required = true];
}

message UpdateTaskRequest {
  Task task = 1 [(buf.validate.field).required = true];
  google.protobuf.FieldMask update_mask = 2 [
    (buf.validate.field).required = true,
    (buf.validate.field).cel = {
      id: "valid_field_mask"
      message: "a field mask path must be one of title, description, or completed"
      expression: "size(this.paths) > 0 && this.paths.all(path, path in ['title', 'description', 'completed'])"
    }
  ];
}

message UpdateTaskResponse {
  Task task = 1 [(buf.validate.field).required = true];
}

message DeleteTaskRequest {
  string id = 1 [(buf.validate.field).string.min_len = 1];
}

message DeleteTaskResponse {
  string id = 1 [(buf.validate.field).string.min_len = 1];
}

message ListTasksRequest {
  optional int32 page_size = 1 [
    (buf.validate.field).int32.gt = 0,
    (buf.validate.field).int32.lte = 100
  ];
  optional string page_token = 2 [(buf.validate.field).string.max_len = 256];
  optional string filter = 3 [(buf.validate.field).string.max_len = 1024];
}

message ListTasksResponse {
  repeated Task tasks = 1;
  optional string next_page_token = 2;
}

service TasksService {
  rpc GetTask(GetTaskRequest) returns (GetTaskResponse) {
    option idempotency_level = NO_SIDE_EFFECTS;
    // option (google.api.http) = {get: "/v1/tasks/{id}"};
    // option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_operation) = {
    //   summary: "Retrieve a task by ID"
    //   tags: "Tasks"
    // };
  }

  rpc CreateTask(CreateTaskRequest) returns (CreateTaskResponse) {
    option idempotency_level = IDEMPOTENT;
    // option (google.api.http) = {
    //   post: "/v1/tasks"
    //   body: "*"
    // };
    // option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_operation) = {
    //   summary: "Create a new task"
    //   tags: "Tasks"
    // };
  }

  rpc UpdateTask(UpdateTaskRequest) returns (UpdateTaskResponse) {
    option idempotency_level = IDEMPOTENT;
    // option (google.api.http) = {
    //   put: "/v1/tasks/{task.id}"
    //   body: "*"
    // };
    // option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_operation) = {
    //   summary: "Update a task by ID"
    //   tags: "Tasks"
    // };
  }

  rpc DeleteTask(DeleteTaskRequest) returns (DeleteTaskResponse) {
    option idempotency_level = IDEMPOTENT;
    // option (google.api.http) = {delete: "/v1/tasks/{id}"};
    // option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_operation) = {
    //   summary: "Delete a task by ID"
    //   tags: "Tasks"
    // };
  }

  rpc ListTasks(ListTasksRequest) returns (ListTasksResponse) {
    option idempotency_level = NO_SIDE_EFFECTS;
    // option (google.api.http) = {get: "/v1/tasks"};
    // option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_operation) = {
    //   summary: "List tasks"
    //   tags: "Tasks"
    // };
  }
}
